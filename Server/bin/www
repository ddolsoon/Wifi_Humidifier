#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('../import').init('./src',['(.+)test/','(.+)node_modules/','(.+)views/','(.+)gulp/']);
var properties = require ("properties");
var app = require('../app');
var debug = require('debug')('Server:server');
var http = require('http');
global._ = require('lodash');
var options = {
  path: true,
  namespaces: true,
  sections: false,
  variables: false,
  include: true
};

properties.parse (".properties", options, function (error, obj){
  if (error) {
    console.error (error);
    throw error;
  } else
  console.log (obj);
  global.__properties = obj;
  startWebServer();
  startTCPServer();
});


function startTCPServer() {
  var server =require('net').createServer(_include("ControlServer")).listen(__properties.control.port);
  server.on('listening',function(){
    console.log('Server is listening on port');
  });
  server.on('connection',function(socket){
    console.log('Server has a new connection');
  });
  server.on('close',function(){
    console.log('Server is now closed');
  });
  server.on('error',function(err){
    console.log('Error occured:',err.message);
  });
}

function startWebServer() {
  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(global.__properties.web.port);
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

}